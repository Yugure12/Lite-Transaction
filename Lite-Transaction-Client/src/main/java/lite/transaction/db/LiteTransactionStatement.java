package lite.transaction.db;

import lombok.AllArgsConstructor;

import java.sql.*;

/**
 * @program: Lite-Transaction
 * @description: 代理jdbc statement
 * @author: nickle
 * @create: 2019-11-01 14:40
 **/
@AllArgsConstructor
public class LiteTransactionStatement implements Statement {
    private Statement proxyStatement;

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return proxyStatement.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return proxyStatement.executeUpdate(sql);
    }

    @Override
    public void close() throws SQLException {
        proxyStatement.close();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return proxyStatement.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        proxyStatement.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return proxyStatement.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        proxyStatement.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        proxyStatement.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return proxyStatement.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        proxyStatement.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        proxyStatement.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return proxyStatement.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        proxyStatement.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        proxyStatement.setCursorName(name);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return proxyStatement.execute(sql);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return proxyStatement.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return proxyStatement.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return proxyStatement.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        proxyStatement.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return proxyStatement.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        proxyStatement.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return proxyStatement.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return proxyStatement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return proxyStatement.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        proxyStatement.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        proxyStatement.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return proxyStatement.executeBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return proxyStatement.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return proxyStatement.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return proxyStatement.getGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return proxyStatement.executeUpdate(sql,autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return proxyStatement.executeUpdate(sql,columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return proxyStatement.executeUpdate(sql,columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return proxyStatement.execute(sql,autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return proxyStatement.execute(sql,columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return proxyStatement.execute(sql,columnNames);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return proxyStatement.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return proxyStatement.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        proxyStatement.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return proxyStatement.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        proxyStatement.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return proxyStatement.isCloseOnCompletion();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return proxyStatement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return proxyStatement.isWrapperFor(iface);
    }
}
